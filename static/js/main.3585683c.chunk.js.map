{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allyProps","className","s","button","ContactForm","onSubmit","initialValues","name","phoneNumber","validationSchema","Yup","matches","required","values","resetForm","form","label","fieldInput","component","validatorError","ContactList","contacts","onDeleteContact","list","map","id","item","itemName","itemPhone","size","Filter","onChange","LOCAL_STORAGE_CONTACTS","App","useState","setContacts","filter","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","isInContacts","toLowerCase","contact","includes","length","alert","newContact","uuid","prev","e","target","value","normalizedFilter","getFilteredContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3585683c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","import React from 'react';\nimport s from './FormButton.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function FormButton({\n  type = 'button',\n  onClick,\n  disabled = false,\n  children,\n  ...allyProps\n}) {\n  return (\n    <button\n      type={type}\n      className={s.button}\n      disabled={disabled}\n      onClick={onClick}\n      {...allyProps}\n    >\n      {children}\n    </button>\n  );\n}\n\nFormButton.propTypes = {\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    .isRequired,\n};\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactForm.module.css';\nimport FormButton from '../FormButton/FormButton';\n\nexport default function ContactForm({ onSubmit }) {\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', phoneNumber: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .matches(\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\",\n            )\n            .required(),\n          phoneNumber: Yup.string()\n            .matches(\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +',\n            )\n            .required(),\n        })}\n        onSubmit={(values, { resetForm }) => {\n          onSubmit(values);\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.label}>\n            Name:\n            <Field className={s.fieldInput} name=\"name\" type=\"text\" />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <label className={s.label}>\n            Phone number:\n            <Field className={s.fieldInput} name=\"phoneNumber\" type=\"tel\" />\n            <ErrorMessage\n              name=\"phoneNumber\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport FormButton from '../FormButton';\nimport s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, phoneNumber }) => (\n        <li key={id} className={s.item}>\n          <span className={s.itemName}>{name}</span>\n          <span className={s.itemPhone}>{phoneNumber}</span>\n          <FormButton\n            onClick={() => onDeleteContact(id)}\n            aria-label=\"Delete contact\"\n          >\n            <MdDelete size=\"18\" />\n          </FormButton>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phoneNumber: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n","import React from 'react';\nimport s from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Filter({ onChange }) {\n  return (\n    <div>\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={onChange}\n          className={s.fieldInput}\n        />\n      </label>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","// import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { v1 as uuid } from 'uuid';\n\nconst LOCAL_STORAGE_CONTACTS = 'contacts';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_CONTACTS));\n    if (contacts) {\n      setContacts(contacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_CONTACTS, JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, phoneNumber }) => {\n    if (isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const newContact = { id: uuid(), name, phoneNumber };\n    setContacts(prev => [newContact, ...prev]);\n  };\n\n  const isInContacts = name => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter(contact => contact.name.toLowerCase().includes(name))\n        .length > 0\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prev => prev.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter onChange={changeFilter} />\n      <ContactList\n        contacts={getFilteredContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"itemName\":\"ContactList_itemName__3linx\",\"itemPhone\":\"ContactList_itemPhone__2aABR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2-gNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};"],"sourceRoot":""}